package edu.cmcc.cpt.demo.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private RecipeRepository recipeRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @GetMapping
    public List<Recipe> getAllRecipes() {
        return recipeRepository.findAll();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Recipe> getRecipesById(@PathVariable int id) {
        Recipe recipe = recipeRepository.findById(id);
        return recipe != null ? ResponseEntity.ok(recipe) : ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<String> createRecipe(@RequestBody Recipe recipe) {
        recipe.setPassword(passwordEncoder.encode(recipe.getPassword())); // Encrypt password
        recipeRepository.save(recipe);
        return ResponseEntity.ok("Recipe created successfully with encrypted password.");
    }

    @PutMapping("/{id}")
    public ResponseEntity<String> updateUser(@PathVariable int id, @RequestBody Recipe recipe) {
        user.setPassword(passwordEncoder.encode(recipe.getPassword())); // Encrypt password
        int rowsAffected = userRepository.update(id, recipe);
        return rowsAffected > 0 ? ResponseEntity.ok("Recipe updated.") : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteRecipe(@PathVariable int id) {
        int rowsAffected = recipeRepository.deleteById(id);
        return rowsAffected > 0 ? ResponseEntity.ok("Recipe deleted.") : ResponseEntity.notFound().build();
    }
}
